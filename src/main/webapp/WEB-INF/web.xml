<?xml version="1.0" encoding="UTF-8"?>
<web-app
        version="3.0"
        xmlns="http://java.sun.com/xml/ns/javaee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0_1.xsd">

    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <display-name>base</display-name>
    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <!--=============================tomcat constrainits=================================-->

    <!--在tomcat-user.xml中配置如下用户及角色
     <role rolename="member"/>
     <user username="zevi" password="zevi" roles="member"/>
   -->
    <security-role>
        <role-name>member</role-name>
    </security-role>
    <security-constraint>
        <web-resource-collection>
            <!--可选,如果不设置,表示将禁止所有 HTTP 方法访问相应的资源-->
            <http-method>GET</http-method>
            <web-resource-name>protect res package</web-resource-name>
            <url-pattern>/res/*</url-pattern>
        </web-resource-collection>
        <!--可选，没有表示任何用户都可以访问，如果<role-name/>为空，任何角色都不能访问-->
        <auth-constraint>
            <role-name>member</role-name>
        </auth-constraint>
    </security-constraint>
    <!-- 验证方式，可选的值为： "BASIC", "DIGEST", "FORM", "CLIENT-CERT" -->
    <!-- 使用的Realm名字，注意这里不能有空格 -->
    <login-config>
        <auth-method>BASIC</auth-method>
        <realm-name>TestConstraints</realm-name>
    </login-config>

    <!-- ==================Servlet======================== -->
    <filter-mapping>
        <filter-name>ImpurityFilter</filter-name>
        <url-pattern>/servlet/*</url-pattern>
    </filter-mapping>
    <filter>
        <filter-name>ImpurityFilter</filter-name>
        <filter-class>com.czw.web.servlet.filter.ImpurityFilter</filter-class>
    </filter>
    <servlet>
        <servlet-name>ServletTest</servlet-name>
        <servlet-class>com.czw.web.servlet.HostServlet</servlet-class>
        <multipart-config>
            <max-file-size>52428800</max-file-size>
            <max-request-size>52428800</max-request-size>
            <file-size-threshold>0</file-size-threshold>
        </multipart-config>
    </servlet>
    <servlet-mapping>
        <servlet-name>ServletTest</servlet-name>
        <url-pattern>/servlet/*</url-pattern>
    </servlet-mapping>

    <!--激活tomcat默认servlet来访问静态资源-->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>
    <!--
        可以同时配置ContextLoaderListener和DispatcherServlet，为了将spring的配置文件和springmvc的配置文件分开用
        http://spring.cndocs.tk/beans.html#beans-java-instantiating-container-web
     -->

    <!-- annotation bean configuration -->
    <!-- <context-param> <param-name>contextClass</param-name> <param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
        </context-param> -->

    <!-- 配置文件 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:applicationContext.xml,
            classpath:spring/applicationContext-*.xml
        </param-value>
    </context-param>

    <!-- springmvc -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc-servlet.xml</param-value>
        </init-param>
        <!-- <init-param> <param-name>contextClass</param-name> <param-value>org.springframework.web.context.support.AnnotationConfigWebApplciationContext</param-value>
            </init-param> <init-param> <param-name>contextConfigLocation</param-name>
            <param-value>com.czw.spring.web.config.WebConfig</param-value> </init-param> -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- root mapping -->
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/main/*</url-pattern>
    </servlet-mapping>

    <!-- spring -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--session-config for test-->
    <session-config>
        <!--会话跟踪方式,COOKIE和sessionid参数url重写，tomcat7中加入SSL跟踪-->
        <tracking-mode>COOKIE</tracking-mode>
        <!--分钟-->
        <session-timeout>20</session-timeout>
        <cookie-config>
            <domain>www.google.com</domain>
            <comment>local domain</comment>
            <max-age>120000</max-age>
        </cookie-config>
    </session-config>

    <env-entry>
        <env-entry-name>resValue</env-entry-name>
        <env-entry-type>java.lang.String</env-entry-type>
        <env-entry-value>在httpServlet子类中通过@Resource(value="resVale")获取当前值</env-entry-value>
    </env-entry>


    <!--
        该标签用于定义JNDI数据源，也可以在context.xml中进行定义，如果在context.xml中可以用<Resource/>
        全局web应用可用，同时在当前的web.xml定义使用到的对应数据源起到说明的作用.
    -->
    <resource-ref>
        <res-ref-name>jdbc/EmployeeDB</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>


</web-app>